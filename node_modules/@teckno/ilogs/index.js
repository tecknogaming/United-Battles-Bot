const fs = require("fs");
const dat = require("date-and-time");
const colors = require("colors");

let timeFormat = "MM-DD-YY hh:mm:ss A";

let themes = {
	log: "green",
	test: "blue",
	debug: "brightGreen",
	error: "red",
	fatal: "brightRed",
	custom: "green"
};

loadThemes(themes);

module.exports = class Logger {
	constructor(filePath, settings = {}) {
		if(!filePath) this.error("FILEPATH_FIELD_UNPROVIDED");
		ifFileExist(filePath);
		this.filePath = filePath;
		this.settings = settings;
		
		if(settings.timeFormat) timeFormat = settings.timeFormat;
	}

	log(str, log = true) {
		if(!str) throw new Error("UNPROFIDED_FIELD");
		const time = currentTime();

		let data = fs.readFileSync(this.filePath).toString() || "";
		console.log(`[${time}]` + ` [LOG] `.log + `${str}`);
		if (log) fs.writeFileSync(this.filePath, `${data}\n[${time}]` + ` [LOG] ` + `${str}`);
	}

	test(str, log = true) {
		if(!str) throw new Error("UNPROFIDED_FIELD");
		const time = currentTime();

		let data = fs.readFileSync(this.filePath).toString() || "";
		console.log(`[${time}]` + ` [TEST] `.test + `${str}`);
		if (log) fs.writeFileSync(this.filePath, `${data}\n[${time}]` + ` [TEST] ` + `${str}`);
	}
	
	debug(str, log = true) {
		if(!str) throw new Error("UNPROFIDED_FIELD");
		const time = currentTime();

		let data = fs.readFileSync(this.filePath).toString() || "";
		console.log(`[${time}]` + ` [DEBUG] `.debug + `${str}`);
		if (log) fs.writeFileSync(this.filePath, `${data}\n[${time}]` + ` [DEBUG] ` + `${str}`);
	}

	error(str, log = true) {
		if(!str) throw new Error("UNPROFIDED_FIELD");
		const time = currentTime();

		let data = fs.readFileSync(this.filePath).toString() || "";
		console.log(`[${time}]` + ` [ERROR] `.error + `${str}`);
		if (log) fs.writeFileSync(this.filePath, `${data}\n[${time}]` + ` [ERROR] ` + `${str}`);
	}

	fatal(str, log = true) {
		if(!str) throw new Error("UNPROFIDED_FIELD");
		const time = currentTime();

		let data = fs.readFileSync(this.filePath).toString() || "";
		console.log(`[${time}]` + ` [FATAL] `.fatal + `${str}`);
		if (log) fs.writeFileSync(this.filePath, `${data}\n[${time}]` + ` [FATAL] ` + `${str}`);
	}
	
	custom(str, options = {name: "custom", color: "green"}) {
		if(!str) throw new Error("UNPROFIDED_FIELD");
		themes.custom = options.color; loadThemes(themes);
		const time = currentTime();

		let data = fs.readFileSync(this.filePath).toString() || "";
		console.log(`[${time}]` + ` [${options.name.toUpperCase() || "CUSTOM"}] `.custom + `${str}`);
		if (options.logToFile) fs.writeFileSync(this.filePath, `${data}\n[${time}]` + ` [${options.name.toUpperCase() || "CUSTOM"}] ` + `${str}`);
		if(this.settings.customTheme) themes.custom = this.settings.customTheme || "green"; loadThemes(themes);
	}
	
	newDir(newPath) {
		if(!str) throw new Error("UNPROFIDED_FIELD");
		this.filePath = newPath;
	}

};

function currentTime() {
	const now = new Date();
	const format = dat.compile(timeFormat);
	const time = dat.format(now, format);
	
	return time;
}

function ifFileExist(dir) {
	if(!fs.existsSync(dir)) {
	 fs.writeFileSync(dir, " ");
	}
}

function loadThemes(themes) {
	colors.setTheme(themes);
}